spring:
  main:
    allow-circular-references: true
  shardingsphere:
    mode:
      type: Standalone
      repository:
        type: JDBC
#      type: Cluster
#      repository:
#        type: ZooKeeper
#        props:
#          namespace: shardingsphere
#          server-lists: 192.168.100.100:2181
#          retryIntervalMilliseconds: 5000
#          timeToLiveSeconds: 60
    props:
      sql-show: true
      check-table-metadata-enabled: true
    datasource:
      names: ds0,ds1
      ds0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://192.168.100.100:3306/study-sharding-1
        username: root
        password: admin
      ds1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://192.168.100.100:3306/study-sharding-2
        username: root
        password: admin
    rules:
      sharding:
        # 全局默认策略
        default-key-generate-strategy:
          column: id
          key-generator-name: snowflake
        tables:
          operate_log:
            actual-data-nodes: ds$->{[0,1]}.operate_log
            database-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: user-inline
          t_order:
            actual-data-nodes: ds0.t_order_$->{[0,1]}
            table-strategy:
              standard:
                sharding-column: id
                sharding-algorithm-name: order-inline
          order_item:
            actual-data-nodes: ds0.order_item_$->{[0,1]}
            table-strategy:
              standard:
                sharding-column: order_id
                sharding-algorithm-name: orderItem-inline
          member:
            actual-data-nodes: ds$->{[0,1]}.member
            database-strategy:
              hint:
                sharding-algorithm-name: member-hint
          # 单表 不指定默认ds0
#          single_table:
#            actual-data-nodes: ds1.single_table
        sharding-algorithms:
          user-inline:
            type: INLINE
            props:
              algorithm-expression: ds$->{user_id % 2}
              # 是否支持范围查询 无视分片策略进行全路由
              allow-range-query-with-inline-sharding: true
          order-inline:
            type: INLINE
            props:
              algorithm-expression: t_order_$->{id % 2}
          orderItem-inline:
            type: INLINE
            props:
              algorithm-expression: order_item_$->{order_id % 2}
          member-hint:
            type: CLASS_BASED
            props:
              strategy: hint
              # 不能使用algorithm-class-name
              algorithmClassName: com.ljt.study.sharding.algorithm.MyHintShardingAlgorithm
        key-generators:
          snowflake:
            type: SNOWFLAKE
            props:
              worker-id: 1
        broadcast-tables:
          - dict
        binding-tables:
          - t_order,order_item

mybatis:
  mapper-locations: classpath:mapper/*.xml
  configuration:
    map-underscore-to-camel-case: true
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

mybatis-plus:
  global-config:
    db-config:
      logic-delete-field: deleteFlag # 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)
      logic-delete-value: 1 # 逻辑已删除值(默认为 1)
      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)

